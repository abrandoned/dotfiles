" Prevents old bugs and limitations
set nocompatible
set t_Co=256

" Remove toolbar if running in mvim
if has("gui_running")
  set guioptions=aAce
  set transparency=8
endif

filetype off " for pathogen to load
" Calling pathogen to load the bundles
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" Setup indent for snipMate
filetype plugin indent on

" Set line numbers
set nu
set showmatch

" Set syntax highlighting
syntax on

" Set highlight search
set hls

" Wrap text
set lbr
set ruler

" Tab settings
set expandtab
set tabstop=2
set shiftwidth=2
set smarttab
set autoindent

" Ruby Autocomplete stuff
" autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
" autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
" autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
" autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd BufNewFile,BufRead *.mobile.erb let b:eruby_subtype = 'html' 

" Remove history file if created
autocmd VimLeave * if filereadable($HOME."/.vim/.netrwhist") | call delete($HOME."/.vim/.netrwhist") | endif

" Clang-Format alias
let g:clang_format#command = "clang-format-3.5"
let g:clang_format#code_style = "llvm"
let g:clang_format#style_options = { "AlwaysBreakTemplateDeclarations" : "true" }

" SuperTab Config stuff
" let g:SuperTabDefaultCompletionType = "context"

" .ru highlighting
autocmd BufRead,BufNewFile *.ru setf ruby

" Rabl highlighting
autocmd BufRead,BufNewFile *.rabl setf ruby
autocmd BufRead,BufNewFile *.rabl syn keyword rubyRabl node attribute object child collection attributes glue extends
autocmd BufRead,BufNewFile *.rabl hi def link rubyRabl Function

" For Ack-grep
if executable('ack-grep')
  let g:ackprg="ack-grep -H --nocolor --nogroup --nosql --column --ignore-dir=doc"
endif

if executable('ack')
  let g:ackprg="ack -H --nocolor --nogroup --nosql --column --ignore-dir=doc"
endif

" Default colorscheme 
colorscheme darkmate

" Change autocomplete PINK background
highlight Pmenu ctermbg=238 gui=bold

" Setup mappings for CtrlP
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_show_hidden = 1 " Want to see dotfiles
" Setup ignore patterns for CtrlP
set wildignore+=*.o,*.obj,*/.git/*,doc/**,*.sql,*.log

" Add NERDTree open by default and move to edit window
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Setup stuff for SnipMate
source ~/.vim/bundle/vim-snipmate/snippets/support_functions.vim
autocmd vimenter * call s:SetupSnippets()
function! s:SetupSnippets()
  " if in rails dir
  if filereadable("./config/environment.rb")
    let g:snipMate.scope_aliases={"ruby": "ruby-rails,ruby","eruby": "eruby-rails,eruby,html", "javascript": "javascript,javascript-jquery"}
    
    if filereadable("./spec/spec_helper.rb")
      call extend(g:snipMate.scope_aliases, {"ruby": "ruby-rails,ruby-rspec,ruby"})
    endif

    if filereadable("./spec/factories.rb")
      call extend(g:snipMate.scope_aliases, {"ruby": "ruby-rails,ruby-rspec,ruby,ruby-factorygirl"})
    endif
  endif
endfunction

" Setup xmllint for xml formatting
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" Add all the tags files in the gemset to the ctags searching
autocmd FileType ruby let &l:tags = pathogen#legacyjoin(pathogen#uniq(
      \ pathogen#split(&tags) +
      \ map(split($GEM_PATH,':'),'v:val."/gems/*/tags"')))

" V formatting automatically on save => off
let g:vfmt = 0
autocmd Filetype vlang setlocal ts=4 sw=4 expandtab

" Add Golang stuff
let g:go_disable_autoinstall = 0

" Highlight
let g:go_highlight_functions = 1  
let g:go_highlight_methods = 1  
let g:go_highlight_structs = 1  
let g:go_highlight_operators = 1  
let g:go_highlight_build_constraints = 1 
